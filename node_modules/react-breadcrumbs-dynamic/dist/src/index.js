'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Breadcrumbs = exports.BreadcrumbsItem = exports.BreadcrumbsProvider = exports.Item = exports.Dummy = exports.withBreadcrumbsContainer = exports.withBreadcrumbsItem = exports.withBreadcrumbs = exports.breadcrumbsBearingKey = exports.breadcrumbsThroughArea = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactThrough = require('react-through');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var breadcrumbsThroughArea = exports.breadcrumbsThroughArea = 'breadcrumbs';

var breadcrumbsBearingKey = exports.breadcrumbsBearingKey = 'to';

var withBreadcrumbs = exports.withBreadcrumbs = (0, _reactThrough.throughInterface)(breadcrumbsThroughArea);

var withBreadcrumbsItem = exports.withBreadcrumbsItem = (0, _reactThrough.throughAgent)(breadcrumbsThroughArea, breadcrumbsBearingKey);

var withBreadcrumbsContainer = exports.withBreadcrumbsContainer = (0, _reactThrough.throughContainer)(breadcrumbsThroughArea);

var Dummy = exports.Dummy = function Dummy() {
  return null;
};

var Item = exports.Item = function Item() {
  return null;
};

var BreadcrumbsProvider = exports.BreadcrumbsProvider = _reactThrough.ThroughProvider;

var BreadcrumbsItem = exports.BreadcrumbsItem = (0, _reactThrough.createAdvAgent)(breadcrumbsThroughArea, breadcrumbsBearingKey);

function prepareProps(props, rename, duplicate, remove) {
  var p = Object.assign({}, props);
  Object.keys(duplicate).forEach(function (k) {
    p[duplicate[k]] = p[k];
  });
  Object.keys(rename).forEach(function (k) {
    p[rename[k]] = p[k];delete p[k];
  });
  Object.keys(remove).forEach(function (k) {
    delete p[k];
  });
  return p;
}

var defaultCompare = function defaultCompare(a, b) {
  return a[breadcrumbsBearingKey].length - b[breadcrumbsBearingKey].length;
};

var Breadcrumbs_ = function Breadcrumbs_(props) {
  var _props$container = props.container,
      Container = _props$container === undefined ? 'span' : _props$container,
      containerProps = props.containerProps,
      _props$hideIfEmpty = props.hideIfEmpty,
      hideIfEmpty = _props$hideIfEmpty === undefined ? false : _props$hideIfEmpty,
      _props$item = props.item,
      Item = _props$item === undefined ? 'a' : _props$item,
      _props$finalItem = props.finalItem,
      FinalItem = _props$finalItem === undefined ? Item : _props$finalItem,
      _props$finalProps = props.finalProps,
      finalProps = _props$finalProps === undefined ? {} : _props$finalProps,
      separator = props.separator,
      _props$duplicateProps = props.duplicateProps,
      duplicate = _props$duplicateProps === undefined ? {} : _props$duplicateProps,
      _props$removeProps = props.removeProps,
      remove = _props$removeProps === undefined ? {} : _props$removeProps,
      _props$renameProps = props.renameProps,
      rename = _props$renameProps === undefined ? Item === 'a' ? { to: 'href' } : {} : _props$renameProps,
      compare = props.compare;

  var data = props[breadcrumbsThroughArea];
  var itemsValue = Object.keys(data).map(function (k) {
    return data[k];
  }).sort(compare || defaultCompare);
  var count = itemsValue.length;

  if (hideIfEmpty && count === 0) {
    return null;
  }

  return _react2.default.createElement(
    Container,
    containerProps,
    itemsValue.map(function (itemValue, i) {
      return i + 1 < count ? separator ? _react2.default.createElement(
        'span',
        { key: i },
        _react2.default.createElement(Item, prepareProps(itemValue, rename, duplicate, remove)),
        separator
      ) : _react2.default.createElement(Item, _extends({ key: i }, prepareProps(itemValue, rename, duplicate, remove))) : _react2.default.createElement(FinalItem, _extends({ key: i
      }, prepareProps(itemValue, rename, duplicate, remove), finalProps));
    })
  );
};

var Breadcrumbs = exports.Breadcrumbs = withBreadcrumbsContainer(Breadcrumbs_);