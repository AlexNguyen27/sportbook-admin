{"ast":null,"code":"import logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, AUTHENTICATE, BASE_URL, GET_POSTS, GET_SELECTED_POST, DELETE_POST, EDIT_POST } from \"./types\";\nimport { useHistory } from \"react-router-dom\";\nimport { hera } from \"hera-js\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\nimport Swal from \"sweetalert2\"; //LOGIN User\n\nexport const getPosts = setLoading => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n            query {\n                getPosts {\n                    id\n                    title\n                    description\n                    status\n                    view\n                    imageUrl\n                    createdAt\n                    updatedAt\n                    categoryId\n                    comments{\n                        id\n                        comment\n                        userId\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      imageUrl\n                    }  \n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {}\n  });\n\n  if (!errors) {\n    const posts = arrayToObject(data.getPosts);\n    dispatch({\n      type: GET_POSTS,\n      posts\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n}; //LOGIN User\n\nexport const getAllPublicPost = setLoading => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n            query {\n                getPosts(all: true) {\n                    id\n                    title\n                    description\n                    status\n                    imageUrl\n                    view\n                    createdAt\n                    updatedAt\n                    categoryId\n                    userId\n                    comments{\n                        id\n                        comment\n                        userId\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      imageUrl\n                    }  \n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {}\n  });\n\n  if (!errors) {\n    const posts = arrayToObject(data.getPosts);\n    dispatch({\n      type: GET_POSTS,\n      posts\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const addNewPost = (bodyText, title, categoryId, status, history) => async (dispatch, getState) => {\n  const {\n    token,\n    user: {\n      id: userId\n    }\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n          createPost(title: $title,status: $status,description: $description,userId: $userId,categoryId: $categoryId) {\n            id\n            title\n            description\n            status\n            imageUrl\n            createdAt\n            updatedAt\n            categoryId\n            comments{\n                id\n                comment\n                userId\n                parentId\n                createdAt\n                updatedAt\n            }\n            reactions {\n                userId\n                reactionTypeId\n                postId\n            }\n            user {\n              id \n              username\n              firstName\n              lastName\n            }  \n            category {\n              id \n              name\n            }\n          }\n        }\n      `,\n    variables: {\n      title: title,\n      status: status,\n      description: bodyText,\n      userId: userId,\n      categoryId: categoryId\n    }\n  });\n  console.log(data);\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Added successfully!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    history.push(`/user-profile/${userId}`);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n}; //LOGIN User\n\nexport const getPostById = (setLoading, id) => async (dispatch, getState) => {\n  const {\n    token,\n    user: {\n      id: userId\n    }\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n            query {\n              getPostById(id: $id) {\n                    id\n                    title\n                    description\n                    status\n                    view\n                    imageUrl\n                    createdAt\n                    updatedAt\n                    categoryId\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      email\n                      phone\n                      address \n                      imageUrl\n                      githubUsername\n                    }\n                    comments{\n                        id\n                        comment\n                        userId\n                        user {\n                          username\n                          firstName\n                          lastName\n                          imageUrl\n                        }\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {\n      id\n    }\n  });\n\n  if (!errors) {\n    const {\n      getPostById: currentPost\n    } = data;\n    dispatch({\n      type: GET_SELECTED_POST,\n      post: currentPost\n    });\n    setLoading(false); // if (!isEdit) {\n    //   if (\n    //     currentPost.reactions.length &&\n    //     !!currentPost.reactions.find((reaction) => reaction.userId === userId)\n    //   ) {\n    //     setCurrentLike(1);\n    //     setIsLike(true);\n    //   }\n    // }\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const deletePost = (setLoading, id) => async (dispatch, getState) => {\n  console.log(\"-deletePost----------\");\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        deletePost(id: $id) {\n          status,\n          message\n        }\n      } \n    `,\n    variables: {\n      id\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: DELETE_POST,\n      selectedId: id\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted successfully!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const updatePost = (setLoading, postData) => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    id,\n    title,\n    description,\n    status,\n    categoryId\n  } = postData;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        updatePost(\n          id: $id,\n          title: $title,\n          description: $description,\n          status: $status,\n          categoryId: $categoryId,\n        ) {\n          id\n          title\n          status\n          description\n          view\n          category {\n            id\n            name\n          }\n        }\n      } \n    `,\n    variables: {\n      id,\n      title,\n      description,\n      status,\n      categoryId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: EDIT_POST,\n      post: data.updatePost\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: \"Please check the input!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/post.js"],"names":["logoutDispatch","GET_ERRORS","CLEAR_ERRORS","AUTHENTICATE","BASE_URL","GET_POSTS","GET_SELECTED_POST","DELETE_POST","EDIT_POST","useHistory","hera","arrayToObject","Swal","getPosts","setLoading","dispatch","getState","token","auth","data","errors","options","url","headers","query","variables","posts","type","console","log","message","getAllPublicPost","addNewPost","bodyText","title","categoryId","status","history","user","id","userId","description","fire","position","showConfirmButton","timer","push","getPostById","currentPost","post","deletePost","selectedId","updatePost","postData"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,4BAA3B;AACA,SACEC,UADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,QAJF,EAKEC,SALF,EAMEC,iBANF,EAOEC,WAPF,EAQEC,SARF,QASO,SATP;AAUA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,IAA7B;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA9CsC;AA+ClCC,IAAAA,SAAS,EAAE;AA/CuB,GAAD,CAAnC;;AAiDA,MAAI,CAACL,MAAL,EAAa;AACX,UAAMM,KAAK,GAAGf,aAAa,CAACQ,IAAI,CAACN,QAAN,CAA3B;AAEAE,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEtB,SADC;AAEPqB,MAAAA;AAFO,KAAD,CAAR;AAIAZ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GARD,MAQO;AACLc,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACApB,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CApEM,C,CAsEP;;AACA,OAAO,MAAMC,gBAAgB,GAAIjB,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC5E,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,IAA7B;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA/CsC;AAgDlCC,IAAAA,SAAS,EAAE;AAhDuB,GAAD,CAAnC;;AAkDA,MAAI,CAACL,MAAL,EAAa;AACX,UAAMM,KAAK,GAAGf,aAAa,CAACQ,IAAI,CAACN,QAAN,CAA3B;AAEAE,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEtB,SADC;AAEPqB,MAAAA;AAFO,KAAD,CAAR;AAIAZ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GARD,MAQO;AACLc,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACApB,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CArEM;AAuEP,OAAO,MAAME,UAAU,GAAG,CACxBC,QADwB,EAExBC,KAFwB,EAGxBC,UAHwB,EAIxBC,MAJwB,EAKxBC,OALwB,KAMrB,OAAOtB,QAAP,EAAiBC,QAAjB,KAA8B;AACjC,QAAM;AACJC,IAAAA,KADI;AAEJqB,IAAAA,IAAI,EAAE;AAAEC,MAAAA,EAAE,EAAEC;AAAN;AAFF,MAGFxB,QAAQ,GAAGE,IAHf;AAIA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OA5CsC;AA6ClCC,IAAAA,SAAS,EAAE;AACTS,MAAAA,KAAK,EAAEA,KADE;AAETE,MAAAA,MAAM,EAAEA,MAFC;AAGTK,MAAAA,WAAW,EAAER,QAHJ;AAITO,MAAAA,MAAM,EAAEA,MAJC;AAKTL,MAAAA,UAAU,EAAEA;AALH;AA7CuB,GAAD,CAAnC;AAsDAP,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;;AACA,MAAI,CAACC,MAAL,EAAa;AACXL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEzB;AADC,KAAD,CAAR;AAGAU,IAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERhB,MAAAA,IAAI,EAAE,SAFE;AAGRO,MAAAA,KAAK,EAAE,qBAHC;AAIRU,MAAAA,iBAAiB,EAAE,KAJX;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAV;AAOAR,IAAAA,OAAO,CAACS,IAAR,CAAc,iBAAgBN,MAAO,EAArC;AACD,GAZD,MAYO;AACLZ,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACApB,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CAtFM,C,CAwFP;;AACA,OAAO,MAAMiB,WAAW,GAAG,CAACjC,UAAD,EAAayB,EAAb,KAAoB,OAAOxB,QAAP,EAAiBC,QAAjB,KAA8B;AAC3E,QAAM;AACJC,IAAAA,KADI;AAEJqB,IAAAA,IAAI,EAAE;AAAEC,MAAAA,EAAE,EAAEC;AAAN;AAFF,MAGFxB,QAAQ,GAAGE,IAHf;AAKA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAxDsC;AAyDlCC,IAAAA,SAAS,EAAE;AACTc,MAAAA;AADS;AAzDuB,GAAD,CAAnC;;AA6DA,MAAI,CAACnB,MAAL,EAAa;AACX,UAAM;AAAE2B,MAAAA,WAAW,EAAEC;AAAf,QAA+B7B,IAArC;AACAJ,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAErB,iBADC;AAEP2C,MAAAA,IAAI,EAAED;AAFC,KAAD,CAAR;AAIAlC,IAAAA,UAAU,CAAC,KAAD,CAAV,CANW,CAQX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAjBD,MAiBO;AACLc,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACApB,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CA5FM;AA8FP,OAAO,MAAMoB,UAAU,GAAG,CAACpC,UAAD,EAAayB,EAAb,KAAoB,OAAOxB,QAAP,EAAiBC,QAAjB,KAA8B;AAC1EY,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAM;AAAEZ,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,IAA7B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAfsC;AAgBlCC,IAAAA,SAAS,EAAE;AACTc,MAAAA;AADS;AAhBuB,GAAD,CAAnC;;AAoBA,MAAI,CAACnB,MAAL,EAAa;AACXL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEzB;AADC,KAAD,CAAR;AAIAa,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEpB,WADC;AAEP4C,MAAAA,UAAU,EAAEZ;AAFL,KAAD,CAAR;AAIA3B,IAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERhB,MAAAA,IAAI,EAAE,SAFE;AAGRO,MAAAA,KAAK,EAAE,uBAHC;AAIRU,MAAAA,iBAAiB,EAAE,KAJX;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAV;AAOA/B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAjBD,MAiBO;AACLc,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACApB,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAR,IAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERhB,MAAAA,IAAI,EAAE,SAFE;AAGRO,MAAAA,KAAK,EAAEd,MAAM,CAAC,CAAD,CAAN,CAAUU,OAHT;AAIRc,MAAAA,iBAAiB,EAAE;AAJX,KAAV;AAMA7B,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CAtDM;AAwDP,OAAO,MAAMsB,UAAU,GAAG,CAACtC,UAAD,EAAauC,QAAb,KAA0B,OAClDtC,QADkD,EAElDC,QAFkD,KAG/C;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAYD,QAAQ,GAAGE,IAA7B;AAEA,QAAM;AAAEqB,IAAAA,EAAF;AAAML,IAAAA,KAAN;AAAaO,IAAAA,WAAb;AAA0BL,IAAAA,MAA1B;AAAkCD,IAAAA;AAAlC,MAAiDkB,QAAvD;AACA,QAAM;AAAElC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmB,MAAMV,IAAI,CAAC;AAClCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,GAAG,EAAElB,QADE;AAEPmB,MAAAA,OAAO,EAAE;AACPN,QAAAA,KADO;AAEP,wBAAgB;AAFT;AAFF,KADyB;AAQlCO,IAAAA,KAAK,EAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA5BsC;AA6BlCC,IAAAA,SAAS,EAAE;AACTc,MAAAA,EADS;AAETL,MAAAA,KAFS;AAGTO,MAAAA,WAHS;AAITL,MAAAA,MAJS;AAKTD,MAAAA;AALS;AA7BuB,GAAD,CAAnC;;AAqCA,MAAI,CAACf,MAAL,EAAa;AACXL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEzB;AADC,KAAD,CAAR;AAIAa,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAEnB,SADC;AAEPyC,MAAAA,IAAI,EAAE9B,IAAI,CAACiC;AAFJ,KAAD,CAAR;AAIAtC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,IAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERhB,MAAAA,IAAI,EAAE,SAFE;AAGRO,MAAAA,KAAK,EAAE,0BAHC;AAIRU,MAAAA,iBAAiB,EAAE,KAJX;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAV;AAOA/B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAlBD,MAkBO;AACLc,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACAR,IAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,MAAAA,QAAQ,EAAE,QADF;AAERhB,MAAAA,IAAI,EAAE,SAFE;AAGRO,MAAAA,KAAK,EAAE,yBAHC;AAIRU,MAAAA,iBAAiB,EAAE,KAJX;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAV;AAOA7C,IAAAA,cAAc,CAACe,QAAD,EAAWK,MAAX,CAAd;AACAL,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE1B,UADC;AAEPmB,MAAAA,MAAM,EAAEA,MAAM,CAAC,CAAD,CAAN,CAAUU;AAFX,KAAD,CAAR;AAID;AACF,CA7EM","sourcesContent":["import logoutDispatch from \"../../utils/logoutDispatch\";\nimport {\n  GET_ERRORS,\n  CLEAR_ERRORS,\n  AUTHENTICATE,\n  BASE_URL,\n  GET_POSTS,\n  GET_SELECTED_POST,\n  DELETE_POST,\n  EDIT_POST,\n} from \"./types\";\nimport { useHistory } from \"react-router-dom\";\nimport { hera } from \"hera-js\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\nimport Swal from \"sweetalert2\";\n\n//LOGIN User\nexport const getPosts = (setLoading) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n            query {\n                getPosts {\n                    id\n                    title\n                    description\n                    status\n                    view\n                    imageUrl\n                    createdAt\n                    updatedAt\n                    categoryId\n                    comments{\n                        id\n                        comment\n                        userId\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      imageUrl\n                    }  \n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {},\n  });\n  if (!errors) {\n    const posts = arrayToObject(data.getPosts);\n\n    dispatch({\n      type: GET_POSTS,\n      posts,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\n//LOGIN User\nexport const getAllPublicPost = (setLoading) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n            query {\n                getPosts(all: true) {\n                    id\n                    title\n                    description\n                    status\n                    imageUrl\n                    view\n                    createdAt\n                    updatedAt\n                    categoryId\n                    userId\n                    comments{\n                        id\n                        comment\n                        userId\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      imageUrl\n                    }  \n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {},\n  });\n  if (!errors) {\n    const posts = arrayToObject(data.getPosts);\n\n    dispatch({\n      type: GET_POSTS,\n      posts,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const addNewPost = (\n  bodyText,\n  title,\n  categoryId,\n  status,\n  history\n) => async (dispatch, getState) => {\n  const {\n    token,\n    user: { id: userId },\n  } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n          createPost(title: $title,status: $status,description: $description,userId: $userId,categoryId: $categoryId) {\n            id\n            title\n            description\n            status\n            imageUrl\n            createdAt\n            updatedAt\n            categoryId\n            comments{\n                id\n                comment\n                userId\n                parentId\n                createdAt\n                updatedAt\n            }\n            reactions {\n                userId\n                reactionTypeId\n                postId\n            }\n            user {\n              id \n              username\n              firstName\n              lastName\n            }  \n            category {\n              id \n              name\n            }\n          }\n        }\n      `,\n    variables: {\n      title: title,\n      status: status,\n      description: bodyText,\n      userId: userId,\n      categoryId: categoryId,\n    },\n  });\n\n  console.log(data);\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Added successfully!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    history.push(`/user-profile/${userId}`);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\n//LOGIN User\nexport const getPostById = (setLoading, id) => async (dispatch, getState) => {\n  const {\n    token,\n    user: { id: userId },\n  } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n            query {\n              getPostById(id: $id) {\n                    id\n                    title\n                    description\n                    status\n                    view\n                    imageUrl\n                    createdAt\n                    updatedAt\n                    categoryId\n                    user {\n                      id \n                      username\n                      firstName\n                      lastName\n                      email\n                      phone\n                      address \n                      imageUrl\n                      githubUsername\n                    }\n                    comments{\n                        id\n                        comment\n                        userId\n                        user {\n                          username\n                          firstName\n                          lastName\n                          imageUrl\n                        }\n                        parentId\n                        createdAt\n                        updatedAt\n                    }\n                    reactions {\n                        userId\n                        reactionTypeId\n                        postId\n                    }\n                    category {\n                      id \n                      name\n                    }\n                }\n            }\n        `,\n    variables: {\n      id,\n    },\n  });\n  if (!errors) {\n    const { getPostById: currentPost } = data;\n    dispatch({\n      type: GET_SELECTED_POST,\n      post: currentPost,\n    });\n    setLoading(false);\n\n    // if (!isEdit) {\n    //   if (\n    //     currentPost.reactions.length &&\n    //     !!currentPost.reactions.find((reaction) => reaction.userId === userId)\n    //   ) {\n    //     setCurrentLike(1);\n    //     setIsLike(true);\n    //   }\n    // }\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const deletePost = (setLoading, id) => async (dispatch, getState) => {\n  console.log(\"-deletePost----------\");\n  const { token } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        deletePost(id: $id) {\n          status,\n          message\n        }\n      } \n    `,\n    variables: {\n      id,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: DELETE_POST,\n      selectedId: id,\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted successfully!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true,\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const updatePost = (setLoading, postData) => async (\n  dispatch,\n  getState\n) => {\n  const { token } = getState().auth;\n\n  const { id, title, description, status, categoryId } = postData;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        updatePost(\n          id: $id,\n          title: $title,\n          description: $description,\n          status: $status,\n          categoryId: $categoryId,\n        ) {\n          id\n          title\n          status\n          description\n          view\n          category {\n            id\n            name\n          }\n        }\n      } \n    `,\n    variables: {\n      id,\n      title,\n      description,\n      status,\n      categoryId,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: EDIT_POST,\n      post: data.updatePost,\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: \"Please check the input!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}