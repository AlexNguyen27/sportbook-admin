{"ast":null,"code":"import logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, BASE_URL, LIKE_REACTION, EDIT_POST, GET_REACTION_TYPE, REACTION_SELECTED_POST } from \"./types\";\nimport { hera } from \"hera-js\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\nexport const likeReaction = (postId, categoryId, title, description, setIsLiked, setTotalLike, userInfo) => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    token,\n    user: {\n      id: userId\n    }\n  } = state.auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n            createReaction(\n                userId: $userId, \n                postId: $postId, \n                reactionTypeId: \"9d31b9c1-e375-4dc5-9335-0c8879695163\") \n                {\n                    status\n                    message\n                }\n        }\n      `,\n    variables: {\n      userId,\n      postId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    const reactionTypes = state.reactionType.reactionTypes; // GET REACTION TYPE LIKE\n\n    let reactionTypeId = \"\";\n    Object.keys(reactionTypes).map(key => {\n      if (reactionTypes[key].name === \"like\") {\n        reactionTypeId = key;\n      }\n    });\n    const {\n      posts,\n      selected_post\n    } = state.post; // REACTION AT SELECTED POST\n\n    if (data.createReaction.message.includes(\"Delete\")) {\n      dispatch({\n        type: LIKE_REACTION,\n        isLike: false,\n        postId\n      });\n      setIsLiked(false);\n      setTotalLike(prev => prev - 1);\n      const {\n        reactions = []\n      } = posts[postId] || selected_post;\n      const deletedReactionArr = reactions.filter(item => item.userId !== userId);\n\n      if (JSON.stringify(selected_post) !== \"{}\") {\n        dispatch({\n          type: REACTION_SELECTED_POST,\n          isLike: false,\n          userId\n        });\n      }\n\n      dispatch({\n        type: EDIT_POST,\n        post: { ...posts[postId],\n          reactions: deletedReactionArr || []\n        }\n      });\n    } else {\n      const newPost = {\n        id: postId,\n        userId: userId,\n        categoryId,\n        title,\n        description,\n        user: userInfo\n      }; // FOR FAVORITE TABSS\n\n      dispatch({\n        type: LIKE_REACTION,\n        isLike: true,\n        postId,\n        newPost\n      });\n      setTotalLike(prev => prev + 1);\n      setIsLiked(true);\n      const newReaction = {\n        postId,\n        userId,\n        reactionTypeId\n      };\n      const {\n        reactions = []\n      } = posts[postId] || selected_post;\n      dispatch({\n        type: EDIT_POST,\n        post: { ...posts[postId],\n          reactions: [...reactions, newReaction]\n        }\n      });\n\n      if (JSON.stringify(selected_post) !== \"{}\") {\n        const newReactonLike = {\n          userId,\n          postId,\n          reactionTypeId\n        };\n        dispatch({\n          type: REACTION_SELECTED_POST,\n          isLike: true,\n          newReactonLike\n        });\n      }\n    }\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const getReactionTypes = setLoading => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n            query {\n              getReactionTypes {\n                id \n                name\n              }\n            }\n        `,\n    variables: {}\n  });\n\n  if (!errors) {\n    const reactionTypes = arrayToObject(data.getReactionTypes);\n    dispatch({\n      type: GET_REACTION_TYPE,\n      reactionTypes\n    });\n    setLoading(false);\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/like.js"],"names":["logoutDispatch","GET_ERRORS","CLEAR_ERRORS","BASE_URL","LIKE_REACTION","EDIT_POST","GET_REACTION_TYPE","REACTION_SELECTED_POST","hera","arrayToObject","likeReaction","postId","categoryId","title","description","setIsLiked","setTotalLike","userInfo","dispatch","getState","state","token","user","id","userId","auth","data","errors","options","url","headers","query","variables","type","reactionTypes","reactionType","reactionTypeId","Object","keys","map","key","name","posts","selected_post","post","createReaction","message","includes","isLike","prev","reactions","deletedReactionArr","filter","item","JSON","stringify","newPost","newReaction","newReactonLike","getReactionTypes","setLoading"],"mappings":"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","sourcesContent":["import logoutDispatch from \"../../utils/logoutDispatch\";\nimport {\n  GET_ERRORS,\n  CLEAR_ERRORS,\n  BASE_URL,\n  LIKE_REACTION,\n  EDIT_POST,\n  GET_REACTION_TYPE,\n  REACTION_SELECTED_POST,\n} from \"./types\";\nimport { hera } from \"hera-js\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\n\nexport const likeReaction = (\n  postId,\n  categoryId,\n  title,\n  description,\n  setIsLiked,\n  setTotalLike,\n  userInfo\n) => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    token,\n    user: { id: userId },\n  } = state.auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n            createReaction(\n                userId: $userId, \n                postId: $postId, \n                reactionTypeId: \"9d31b9c1-e375-4dc5-9335-0c8879695163\") \n                {\n                    status\n                    message\n                }\n        }\n      `,\n    variables: {\n      userId,\n      postId,\n    },\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    const reactionTypes = state.reactionType.reactionTypes;\n    // GET REACTION TYPE LIKE\n    let reactionTypeId = \"\";\n    Object.keys(reactionTypes).map((key) => {\n      if (reactionTypes[key].name === \"like\") {\n        reactionTypeId = key;\n      }\n    });\n    const { posts, selected_post } = state.post;\n    // REACTION AT SELECTED POST\n    if (data.createReaction.message.includes(\"Delete\")) {\n      dispatch({\n        type: LIKE_REACTION,\n        isLike: false,\n        postId,\n      });\n      setIsLiked(false);\n      setTotalLike((prev) => prev - 1);\n\n      const { reactions = [] } = posts[postId] || selected_post;\n      const deletedReactionArr = reactions.filter(\n        (item) => item.userId !== userId\n      );\n\n      if (JSON.stringify(selected_post) !== \"{}\") {\n        dispatch({\n          type: REACTION_SELECTED_POST,\n          isLike: false,\n          userId,\n        });\n      }\n\n      dispatch({\n        type: EDIT_POST,\n        post: {\n          ...posts[postId],\n          reactions: deletedReactionArr || [],\n        },\n      });\n    } else {\n      const newPost = {\n        id: postId,\n        userId: userId,\n        categoryId,\n        title,\n        description,\n        user: userInfo,\n      };\n      // FOR FAVORITE TABSS\n      dispatch({\n        type: LIKE_REACTION,\n        isLike: true,\n        postId,\n        newPost,\n      });\n      setTotalLike((prev) => prev + 1);\n      setIsLiked(true);\n\n      const newReaction = {\n        postId,\n        userId,\n        reactionTypeId,\n      };\n      const { reactions = [] } = posts[postId] || selected_post;\n\n      dispatch({\n        type: EDIT_POST,\n        post: {\n          ...posts[postId],\n          reactions: [...reactions, newReaction],\n        },\n      });\n      if (JSON.stringify(selected_post) !== \"{}\") {\n        const newReactonLike = {\n          userId,\n          postId,\n          reactionTypeId,\n        };\n        dispatch({\n          type: REACTION_SELECTED_POST,\n          isLike: true,\n          newReactonLike,\n        });\n      }\n    }\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const getReactionTypes = (setLoading) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n            query {\n              getReactionTypes {\n                id \n                name\n              }\n            }\n        `,\n    variables: {},\n  });\n  if (!errors) {\n    const reactionTypes = arrayToObject(data.getReactionTypes);\n\n    dispatch({\n      type: GET_REACTION_TYPE,\n      reactionTypes,\n    });\n    setLoading(false);\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}