{"ast":null,"code":"import logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, BASE_URL, GET_REPORTS, ADD_REPORT, EDIT_REPORT, DELETE_REPORT } from \"./types\";\nimport { hera } from \"hera-js\"; // import { arrayToObject } from \"../../utils/commonFunction\";\n\nimport Swal from \"sweetalert2\";\nexport const getReports = setLoading => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n            query {\n                getReports {\n                    reportedBy,\n                    postId,\n                    reason\n                    description\n                    status,\n                    createdAt\n                    updatedAt\n                    imageUrl\n                    post {\n                      id\n                      userId\n                      title\n                    }\n                  }\n            }\n        `,\n    variables: {}\n  });\n\n  if (!errors) {\n    // const reports = arrayToObject(data.getReports);\n    dispatch({\n      type: GET_REPORTS,\n      reports: data.getReports\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const addReport = (setLoading, reportedBy, postId, reason) => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth; // todo: add image url\n\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n            createReport(\n                reportedBy: $reportedBy, \n                postId: $postId, \n                reason: $reason, \n                status: \"waiting_for_approve\"\n            ) {\n                reportedBy,\n                postId,\n                reason\n                status\n            }\n        }\n    `,\n    variables: {\n      reportedBy,\n      postId,\n      reason\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: ADD_REPORT,\n      report: data.createReport\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Reported successfully!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    const {\n      extensions: {\n        payload = {}\n      }\n    } = errors[0];\n    setLoading(false);\n\n    if (payload && payload.reportedBy && payload.postId) {\n      Swal.fire({\n        position: \"center\",\n        type: \"Warning\",\n        title: \"You already reports this post\",\n        showConfirmButton: true\n      });\n    } else {\n      Swal.fire({\n        position: \"center\",\n        type: \"Warning\",\n        title: errors[0].message,\n        showConfirmButton: true\n      });\n    }\n\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const deleteReport = (setLoading, reportedBy, postId) => async (dispatch, getState) => {\n  console.log(\"-deleteReport----------\");\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        deleteReport(\n            reportedBy: $reportedBy, \n            postId: $postId, \n         ) {\n           status\n           message\n         }\n      }\n    `,\n    variables: {\n      reportedBy,\n      postId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: DELETE_REPORT,\n      reportedBy,\n      postId\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted successfully!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const updateReport = (setLoading, reportedBy, postId, description, status) => async (dispatch, getState) => {\n  console.log(\"-updateReport----------\");\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        updateRerport(\n            reportedBy: $reportedBy, \n            postId: $postId, \n            description: $description, \n            status: $status\n          ) {\n            reportedBy\n            postId\n            description\n            status\n            updatedAt\n          }\n      } \n    `,\n    variables: {\n      reportedBy,\n      postId,\n      description,\n      status\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: EDIT_REPORT,\n      report: data.updateRerport\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    console.log(errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/report.js"],"names":["logoutDispatch","GET_ERRORS","CLEAR_ERRORS","BASE_URL","GET_REPORTS","ADD_REPORT","EDIT_REPORT","DELETE_REPORT","hera","Swal","getReports","setLoading","dispatch","getState","token","auth","data","errors","options","url","headers","query","variables","type","reports","console","log","message","addReport","reportedBy","postId","reason","report","createReport","fire","position","title","showConfirmButton","timer","extensions","payload","deleteReport","updateReport","description","status","updateRerport"],"mappings":"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","sourcesContent":["import logoutDispatch from \"../../utils/logoutDispatch\";\nimport {\n  GET_ERRORS,\n  CLEAR_ERRORS,\n  BASE_URL,\n  GET_REPORTS,\n  ADD_REPORT,\n  EDIT_REPORT,\n  DELETE_REPORT,\n} from \"./types\";\nimport { hera } from \"hera-js\";\n// import { arrayToObject } from \"../../utils/commonFunction\";\nimport Swal from \"sweetalert2\";\n\nexport const getReports = (setLoading) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n            query {\n                getReports {\n                    reportedBy,\n                    postId,\n                    reason\n                    description\n                    status,\n                    createdAt\n                    updatedAt\n                    imageUrl\n                    post {\n                      id\n                      userId\n                      title\n                    }\n                  }\n            }\n        `,\n    variables: {},\n  });\n  if (!errors) {\n    // const reports = arrayToObject(data.getReports);\n\n    dispatch({\n      type: GET_REPORTS,\n      reports: data.getReports,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const addReport = (\n  setLoading,\n  reportedBy,\n  postId,\n  reason,\n) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  // todo: add image url\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n            createReport(\n                reportedBy: $reportedBy, \n                postId: $postId, \n                reason: $reason, \n                status: \"waiting_for_approve\"\n            ) {\n                reportedBy,\n                postId,\n                reason\n                status\n            }\n        }\n    `,\n    variables: {\n      reportedBy,\n      postId,\n      reason,\n    },\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: ADD_REPORT,\n      report: data.createReport,\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Reported successfully!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    const {\n      extensions: { payload = {} },\n    } = errors[0];\n    setLoading(false)\n    if (payload && payload.reportedBy && payload.postId) {\n      Swal.fire({\n        position: \"center\",\n        type: \"Warning\",\n        title: \"You already reports this post\",\n        showConfirmButton: true,\n      });\n    } else {\n      Swal.fire({\n        position: \"center\",\n        type: \"Warning\",\n        title: errors[0].message,\n        showConfirmButton: true,\n      });\n    }\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const deleteReport = (setLoading, reportedBy, postId) => async (\n  dispatch,\n  getState\n) => {\n  console.log(\"-deleteReport----------\");\n  const { token } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        deleteReport(\n            reportedBy: $reportedBy, \n            postId: $postId, \n         ) {\n           status\n           message\n         }\n      }\n    `,\n    variables: {\n      reportedBy,\n      postId,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: DELETE_REPORT,\n      reportedBy,\n      postId,\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted successfully!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true,\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const updateReport = (\n  setLoading,\n  reportedBy,\n  postId,\n  description,\n  status\n) => async (dispatch, getState) => {\n  console.log(\"-updateReport----------\");\n  const { token } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        updateRerport(\n            reportedBy: $reportedBy, \n            postId: $postId, \n            description: $description, \n            status: $status\n          ) {\n            reportedBy\n            postId\n            description\n            status\n            updatedAt\n          }\n      } \n    `,\n    variables: {\n      reportedBy,\n      postId,\n      description,\n      status,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: EDIT_REPORT,\n      report: data.updateRerport,\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    console.log(errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true,\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}