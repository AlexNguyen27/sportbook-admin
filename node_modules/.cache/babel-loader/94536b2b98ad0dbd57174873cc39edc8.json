{"ast":null,"code":"import { UNAUTHENTICATE, GET_POSTS, EDIT_POST, ADD_POST, DELETE_POST, GET_SELECTED_POST, REACTION_SELECTED_POST, ADD_COMMENT, DELETE_COMMENT, EDIT_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: {},\n  selected_post: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    posts,\n    selectedId,\n    post\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: { ...posts\n        }\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: { ...state.posts,\n          [post.id]: post\n        }\n      };\n\n    case EDIT_POST:\n      return { ...state,\n        posts: { ...state.posts,\n          [post.id]: { ...state.posts[post.id],\n            ...post\n          }\n        }\n      };\n\n    case DELETE_POST:\n      const newPosts = state.posts;\n      delete newPosts[selectedId];\n      return { ...state,\n        posts: newPosts\n      };\n    // ACTION FOR SELECTED POST\n\n    case GET_SELECTED_POST:\n      return { ...state,\n        selected_post: post\n      };\n\n    case REACTION_SELECTED_POST:\n      const {\n        isLike,\n        newReactonLike,\n        userId\n      } = action;\n      const {\n        reactions\n      } = state.selected_post;\n      let newReactions;\n\n      if (isLike) {\n        newReactions = [...reactions, newReactonLike];\n      } else {\n        newReactions = reactions.filter(item => item.userId !== userId);\n      }\n\n      if (!newReactions) {\n        newReactions = [];\n      }\n\n      return { ...state,\n        selected_post: { ...state.selected_post,\n          reactions: newReactions\n        }\n      };\n    // COMMENT AT SELECTED POST\n\n    case ADD_COMMENT:\n      const newComment = action.comment;\n      return { ...state,\n        selected_post: { ...state.selected_post,\n          comments: [...state.selected_post.comments, newComment]\n        }\n      };\n\n    case EDIT_COMMENT:\n      const editComment = action.comment;\n      const oldCommentArr = state.selected_post.comments;\n      const selectedIndex = oldCommentArr.findIndex(item => item.id === editComment.id);\n      oldCommentArr[selectedIndex] = editComment;\n      return { ...state,\n        selected_post: { ...state.selected_post,\n          comments: oldCommentArr\n        }\n      };\n\n    case DELETE_COMMENT:\n      const {\n        commentId\n      } = action;\n      let newCommentArr = state.selected_post.comments.filter(item => item.id !== commentId);\n\n      if (!newCommentArr) {\n        newCommentArr = [];\n      }\n\n      return { ...state,\n        selected_post: { ...state.selected_post,\n          comments: newCommentArr\n        }\n      };\n\n    case UNAUTHENTICATE:\n      return initialState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/reducers/post.js"],"names":["UNAUTHENTICATE","GET_POSTS","EDIT_POST","ADD_POST","DELETE_POST","GET_SELECTED_POST","REACTION_SELECTED_POST","ADD_COMMENT","DELETE_COMMENT","EDIT_COMMENT","initialState","posts","selected_post","state","action","type","selectedId","post","id","newPosts","isLike","newReactonLike","userId","reactions","newReactions","filter","item","newComment","comment","comments","editComment","oldCommentArr","selectedIndex","findIndex","commentId","newCommentArr"],"mappings":"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","sourcesContent":["import {\n  UNAUTHENTICATE,\n  GET_POSTS,\n  EDIT_POST,\n  ADD_POST,\n  DELETE_POST,\n  GET_SELECTED_POST,\n  REACTION_SELECTED_POST,\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  EDIT_COMMENT,\n} from \"../actions/types\";\n\nconst initialState = {\n  posts: {},\n  selected_post: {},\n};\n\nexport default function (state = initialState, action) {\n  const { type, posts, selectedId, post } = action;\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: { ...posts },\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [post.id]: post,\n        },\n      };\n    case EDIT_POST:\n      return {\n        ...state,\n        posts: {\n          ...state.posts,\n          [post.id]: { ...state.posts[post.id], ...post },\n        },\n      };\n\n    case DELETE_POST:\n      const newPosts = state.posts;\n      delete newPosts[selectedId];\n      return {\n        ...state,\n        posts: newPosts,\n      };\n\n    // ACTION FOR SELECTED POST\n    case GET_SELECTED_POST:\n      return {\n        ...state,\n        selected_post: post,\n      };\n    case REACTION_SELECTED_POST:\n      const { isLike, newReactonLike, userId } = action;\n      const { reactions } = state.selected_post;\n      let newReactions;\n      if (isLike) {\n        newReactions = [...reactions, newReactonLike];\n      } else {\n        newReactions = reactions.filter((item) => item.userId !== userId);\n      }\n\n      if (!newReactions) {\n        newReactions = [];\n      }\n\n      return {\n        ...state,\n        selected_post: {\n          ...state.selected_post,\n          reactions: newReactions,\n        },\n      };\n\n    // COMMENT AT SELECTED POST\n    case ADD_COMMENT:\n      const newComment = action.comment;\n      return {\n        ...state,\n        selected_post: {\n          ...state.selected_post,\n          comments: [...state.selected_post.comments, newComment],\n        },\n      };\n    case EDIT_COMMENT:\n      const editComment = action.comment;\n      const oldCommentArr = state.selected_post.comments;\n      const selectedIndex = oldCommentArr.findIndex(\n        (item) => item.id === editComment.id\n      );\n      oldCommentArr[selectedIndex] = editComment;\n      return {\n        ...state,\n        selected_post: {\n          ...state.selected_post,\n          comments: oldCommentArr,\n        },\n      };\n    case DELETE_COMMENT:\n      const { commentId } = action;\n      let newCommentArr = state.selected_post.comments.filter(\n        (item) => item.id !== commentId\n      );\n      if (!newCommentArr) {\n        newCommentArr = [];\n      }\n      return {\n        ...state,\n        selected_post: {\n          ...state.selected_post,\n          comments: newCommentArr,\n        },\n      };\n    case UNAUTHENTICATE:\n      return initialState;\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}