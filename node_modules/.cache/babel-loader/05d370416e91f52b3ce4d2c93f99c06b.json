{"ast":null,"code":"// import axios from \"axios\";\nimport logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, AUTHENTICATE, BASE_URL } from \"./types\";\nimport { hera } from \"hera-js\";\nimport axios from \"axios\"; // import jwt_decode from \"jwt-decode\";\n\nimport Swal from \"sweetalert2\"; //LOGIN User\n\nexport const loginUser = ({\n  email,\n  password\n}) => async dispatch => {\n  // try {\n  // const res = await axios.post('', data: {});\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL\n    },\n    query: `\n        query {\n          login(email: $username, password: $password) {\n            id,\n            token,\n            username,\n            firstName,\n            lastName,\n            email,\n            phone,\n            address,\n            imageUrl,\n            githubUsername,\n            role,\n            createdAt,\n            updatedAt\n          }\n        }\n      `,\n    variables: {\n      email,\n      password\n    }\n  });\n\n  if (errors) {\n    // If login fails, set user info to null\n    logoutDispatch(dispatch, errors); // Set errors\n\n    dispatch({\n      type: GET_ERRORS,\n      errors: {\n        message: errors[0].message\n      }\n    });\n  } else {\n    const resData = data.login;\n    const {\n      token\n    } = resData; // const decoded = jwt_decode(token);\n\n    const userData = { ...resData\n    };\n    delete userData.token;\n\n    if (resData.role === \"ownwer\") {\n      userData.isManager = true;\n    }\n\n    if (resData.role === \"admin\") {\n      userData.isAdmin = true;\n    }\n\n    dispatch({\n      type: AUTHENTICATE,\n      user: {\n        userInfo: userData,\n        isManager: userData.isManager || false,\n        isAdmin: userData.isAdmin || false\n      },\n      token\n    });\n  }\n}; //Logout User\n\nexport const logoutUser = () => dispatch => {\n  // Set user info to null\n  logoutDispatch(dispatch);\n}; // Sign up User\n\nexport const signUpUser = (isAuthenticated, history, userData) => async (dispatch) => {\n  // await axios.post(\"api/auth/signup\", userData, {\n  //   headers: { Authorization: localStorage.token },\n  // });\n  const {\n    username,\n    password\n  } = userData;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL\n    },\n    query: `\n        mutation {\n          register(username: $username, password: $password, role: $role ) {\n            id,\n            username,\n            password,\n            phone,\n            password,\n            imageUrl,\n            githubUsername,\n            role,\n            createdAt,\n            updatedAt\n          }\n        }\n      `,\n    variables: {\n      username,\n      password,\n      role: \"user\"\n    }\n  });\n  console.log(data);\n\n  if (errors) {\n    // console.log('error---------', errors);\n    // logoutUser(dispatch, errors);\n    const formatedError = {};\n    const error = errors[0].message;\n\n    if (error.includes(\"Password\")) {\n      formatedError.password = error;\n    }\n\n    if (error.includes(\"Username\")) {\n      formatedError.username = error;\n    }\n\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...formatedError\n      }\n    });\n  } else {\n    dispatch({\n      type: CLEAR_ERRORS\n    }); // using sweetalert2\n\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Login to continue\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n\n    if (!isAuthenticated) {\n      history.push(\"/login\");\n    }\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/auth.js"],"names":["logoutDispatch","GET_ERRORS","CLEAR_ERRORS","AUTHENTICATE","BASE_URL","hera","axios","Swal","loginUser","email","password","dispatch","data","errors","options","url","query","variables","type","message","resData","login","token","userData","role","isManager","isAdmin","user","userInfo","logoutUser","signUpUser","isAuthenticated","history","username","console","log","formatedError","error","includes","fire","position","title","showConfirmButton","timer","push"],"mappings":"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","sourcesContent":["// import axios from \"axios\";\nimport logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, AUTHENTICATE, BASE_URL } from \"./types\";\nimport { hera } from \"hera-js\";\nimport axios from \"axios\";\n// import jwt_decode from \"jwt-decode\";\n\nimport Swal from \"sweetalert2\";\n//LOGIN User\nexport const loginUser = ({ email, password }) => async (dispatch) => {\n  // try {\n  // const res = await axios.post('', data: {});\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n    },\n    query: `\n        query {\n          login(email: $username, password: $password) {\n            id,\n            token,\n            username,\n            firstName,\n            lastName,\n            email,\n            phone,\n            address,\n            imageUrl,\n            githubUsername,\n            role,\n            createdAt,\n            updatedAt\n          }\n        }\n      `,\n    variables: {\n      email,\n      password,\n    },\n  });\n  if (errors) {\n    // If login fails, set user info to null\n    logoutDispatch(dispatch, errors);\n    // Set errors\n    dispatch({\n      type: GET_ERRORS,\n      errors: { message: errors[0].message },\n    });\n  } else {\n    const resData = data.login;\n    const { token } = resData;\n\n    // const decoded = jwt_decode(token);\n\n    const userData = { ...resData };\n    delete userData.token;\n\n    if (resData.role === \"ownwer\") {\n      userData.isManager = true;\n    }\n    if (resData.role === \"admin\") {\n      userData.isAdmin = true;\n    }\n\n    dispatch({\n      type: AUTHENTICATE,\n      user: {\n        userInfo: userData,\n        isManager: userData.isManager || false,\n        isAdmin: userData.isAdmin || false,\n      },\n      token,\n    });\n  }\n};\n\n//Logout User\nexport const logoutUser = () => (dispatch) => {\n  // Set user info to null\n  logoutDispatch(dispatch);\n};\n\n// Sign up User\nexport const signUpUser = (isAuthenticated, history, userData) => async (\n  dispatch\n) => {\n  // await axios.post(\"api/auth/signup\", userData, {\n  //   headers: { Authorization: localStorage.token },\n  // });\n\n  const { username, password } = userData;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n    },\n    query: `\n        mutation {\n          register(username: $username, password: $password, role: $role ) {\n            id,\n            username,\n            password,\n            phone,\n            password,\n            imageUrl,\n            githubUsername,\n            role,\n            createdAt,\n            updatedAt\n          }\n        }\n      `,\n    variables: {\n      username,\n      password,\n      role: \"user\",\n    },\n  });\n\n  console.log(data);\n  if (errors) {\n    // console.log('error---------', errors);\n    // logoutUser(dispatch, errors);\n\n    const formatedError = {};\n    const error = errors[0].message;\n    if (error.includes(\"Password\")) {\n      formatedError.password = error;\n    }\n    if (error.includes(\"Username\")) {\n      formatedError.username = error;\n    }\n\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...formatedError },\n    });\n  } else {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n    // using sweetalert2\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Login to continue\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n\n    if (!isAuthenticated) {\n      history.push(\"/login\");\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}