{"ast":null,"code":"import logoutDispatch from \"../../utils/logoutDispatch\";\nimport { GET_ERRORS, CLEAR_ERRORS, BASE_URL, DELETE_COMMENT, ADD_COMMENT, EDIT_COMMENT } from \"./types\";\nimport { hera } from \"hera-js\";\nimport Swal from \"sweetalert2\"; // token provided => get fromUserId\n\nexport const addComment = (setLoading, comment, postId, parentId = null) => async (dispatch, getState) => {\n  const {\n    token,\n    user: {\n      id: userId,\n      username,\n      firstName,\n      lastName,\n      imageUrl\n    }\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n            createComment(\n                comment: $comment,\n                userId: $userId,\n                postId:  $postId,\n                parentId: $parentId,\n              ){\n                id\n                comment\n                userId\n                postId\n                parentId\n                createdAt\n                updatedAt\n              }\n        }\n      `,\n    variables: {\n      comment,\n      userId,\n      postId,\n      parentId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    const newComment = { ...data.createComment,\n      user: {\n        username,\n        firstName,\n        lastName,\n        imageUrl\n      }\n    };\n    dispatch({\n      type: ADD_COMMENT,\n      comment: newComment\n    });\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const deleteComment = (setLoading, commentId) => async (dispatch, getState) => {\n  console.log(\"-deleteReport----------\");\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        deleteComment(id: $id) {\n          status\n          message\n        }\n      }\n    `,\n    variables: {\n      id: commentId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    dispatch({\n      type: DELETE_COMMENT,\n      commentId\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted comment!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n    setLoading(false);\n  } else {\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const updateComment = (setLoading, commentId, comment) => async (dispatch, getState) => {\n  const {\n    token,\n    user: {\n      id: userId,\n      username,\n      firstName,\n      lastName,\n      imageUrl\n    }\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n      mutation {\n        updateComment(\n          id: $id\n          comment: $comment,\n        ){\n          id\n          comment\n          userId\n          postId\n          parentId\n          createdAt\n          updatedAt\n        }\n      } \n    `,\n    variables: {\n      id: commentId,\n      comment\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    const newComment = { ...data.updateComment,\n      user: {\n        username,\n        firstName,\n        lastName,\n        imageUrl\n      }\n    };\n    dispatch({\n      type: EDIT_COMMENT,\n      comment: newComment\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/comment.js"],"names":["logoutDispatch","GET_ERRORS","CLEAR_ERRORS","BASE_URL","DELETE_COMMENT","ADD_COMMENT","EDIT_COMMENT","hera","Swal","addComment","setLoading","comment","postId","parentId","dispatch","getState","token","user","id","userId","username","firstName","lastName","imageUrl","auth","data","errors","options","url","headers","query","variables","type","newComment","createComment","message","deleteComment","commentId","console","log","fire","position","title","showConfirmButton","timer","updateComment"],"mappings":"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","sourcesContent":["import logoutDispatch from \"../../utils/logoutDispatch\";\nimport {\n  GET_ERRORS,\n  CLEAR_ERRORS,\n  BASE_URL,\n  DELETE_COMMENT,\n  ADD_COMMENT,\n  EDIT_COMMENT,\n} from \"./types\";\nimport { hera } from \"hera-js\";\nimport Swal from \"sweetalert2\";\n\n// token provided => get fromUserId\nexport const addComment = (\n  setLoading,\n  comment,\n  postId,\n  parentId = null\n) => async (dispatch, getState) => {\n  const {\n    token,\n    user: { id: userId, username, firstName, lastName, imageUrl },\n  } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n            createComment(\n                comment: $comment,\n                userId: $userId,\n                postId:  $postId,\n                parentId: $parentId,\n              ){\n                id\n                comment\n                userId\n                postId\n                parentId\n                createdAt\n                updatedAt\n              }\n        }\n      `,\n    variables: {\n      comment,\n      userId,\n      postId,\n      parentId,\n    },\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    const newComment = {\n      ...data.createComment,\n      user: {\n        username,\n        firstName,\n        lastName,\n        imageUrl,\n      },\n    };\n    dispatch({\n      type: ADD_COMMENT,\n      comment: newComment,\n    });\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\nexport const deleteComment = (setLoading, commentId) => async (\n  dispatch,\n  getState\n) => {\n  console.log(\"-deleteReport----------\");\n  const { token } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        deleteComment(id: $id) {\n          status\n          message\n        }\n      }\n    `,\n    variables: {\n      id: commentId,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    dispatch({\n      type: DELETE_COMMENT,\n      commentId,\n    });\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Deleted comment!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n    setLoading(false);\n  } else {\n    logoutDispatch(dispatch, errors);\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true,\n    });\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const updateComment = (setLoading, commentId, comment) => async (\n  dispatch,\n  getState\n) => {\n  const {\n    token,\n    user: { id: userId, username, firstName, lastName, imageUrl },\n  } = getState().auth;\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n      mutation {\n        updateComment(\n          id: $id\n          comment: $comment,\n        ){\n          id\n          comment\n          userId\n          postId\n          parentId\n          createdAt\n          updatedAt\n        }\n      } \n    `,\n    variables: {\n      id: commentId,\n      comment,\n    },\n  });\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    const newComment = {\n      ...data.updateComment,\n      user: {\n        username,\n        firstName,\n        lastName,\n        imageUrl,\n      },\n    };\n    dispatch({\n      type: EDIT_COMMENT,\n      comment: newComment,\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been save!\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    Swal.fire({\n      position: \"center\",\n      type: \"Warning\",\n      title: errors[0].message,\n      showConfirmButton: true,\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}