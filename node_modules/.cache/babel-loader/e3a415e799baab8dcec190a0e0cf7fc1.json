{"ast":null,"code":"import { GET_ERRORS, CLEAR_ERRORS, GET_USERS, DELETE_USER, EDIT_USER, BASE_URL, GET_USER_PROFILE, GET_FRIEND_PROFILE, EDIT_USER_INFO, GET_GITHUB_AVATAR, GET_CURRENT_USER_AVATAR, BASE_IMAGE_URL } from \"./types\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\nimport { hera } from \"hera-js\";\nimport Swal from \"sweetalert2\";\nimport logoutDispatch from \"../../utils/logoutDispatch\";\nimport Axios from \"axios\"; // GET majors data\n\nexport const getUsers = setLoading => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n          query {\n            getUsers{\n              id\n              username\n              firstName,\n              lastName,\n              email,\n              quote, \n              phone,\n              address,\n              imageUrl,\n              githubUsername,\n              role,\n              createdAt,\n              updatedAt,\n              posts{\n                id\n                title\n                view\n                reactions {\n                  userId\n                  postId\n                  reactionTypeId\n                }\n              }\n            }\n          }\n        `,\n    variables: {}\n  });\n\n  if (!errors) {\n    const usersListObj = arrayToObject(data.getUsers);\n    dispatch({\n      type: GET_USERS,\n      users: usersListObj\n    });\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n}; // GET majors data\n\nexport const getUserProfile = (userId, setLoading) => async (dispatch, getState) => {\n  const {\n    token,\n    user: {\n      id: authUserId\n    }\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n          query {\n            getUserProfile(userId: $userId) {\n              id\n              username\n              firstName,\n              lastName,\n              quote\n              email,\n              phone,\n              address,\n              githubUsername,\n              imageUrl\n              totalFollowers\n              posts {\n                id\n                title,\n                description\n                status\n                userId\n                view\n                user {\n                  id\n                  username\n                  imageUrl\n                  firstName\n                  lastName\n                  githubUsername\n                }\n                categoryId\n                createdAt\n                updatedAt\n                comments {\n                  id\n                  comment\n                  userId\n                  parentId\n                  createdAt\n                  updatedAt\n                }\n                reactions {\n                  userId\n                  reactionTypeId\n                  postId\n                }\n              }\n              followed {\n                fromUserId,\n                toUserId\n                createdAt\n              }\n              userFavoritePosts {\n                id\n                userId\n                categoryId\n                title\n                view\n                user {\n                  id\n                  imageUrl\n                  firstName\n                  lastName\n                  githubUsername\n                }\n                description\n                reactions {\n                  userId\n                  reactionTypeId\n                  postId\n                }\n                comments {\n                  id\n                  comment\n                  userId\n                  parentId\n                }\n              }\n            }\n          }\n        `,\n    variables: {\n      userId\n    }\n  });\n\n  if (!errors) {\n    if (authUserId === userId) {\n      dispatch({\n        type: GET_USER_PROFILE,\n        user_profile: data.getUserProfile\n      });\n    } else {\n      dispatch({\n        type: GET_FRIEND_PROFILE,\n        friend_profile: data.getUserProfile\n      });\n    }\n\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const updatePassword = (setLoading, currentPassword, newPassword, confirmPassword, userId) => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    auth: {\n      token,\n      user: {\n        id: authId\n      }\n    }\n  } = state;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n          changePassword(\n            ${userId ? `userId: ${userId}` : \"\"} \n            currentPassword: $currentPassword, \n            newPassword: $newPassword, \n            confirmPassword: $confirmPassword\n          ) {\n            status\n            message\n          }\n        }\n      `,\n    variables: {\n      currentPassword,\n      newPassword,\n      confirmPassword\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    setLoading(false);\n    const {\n      message\n    } = errors[0];\n    const error = {};\n\n    if (message.includes(\"Current password\")) {\n      error.currentPassword = message;\n    } else if (message.includes(\"Password\")) {\n      error.newPassword = message;\n    } else if (message.includes(\"Confirm password\")) {\n      error.confirmPassword = message;\n    } else {\n      Swal.fire({\n        position: \"center\",\n        type: \"Error\",\n        title: message,\n        showConfirmButton: true\n      });\n    }\n\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...error\n      }\n    });\n  }\n};\nexport const editUserInfo = (setLoading, userData) => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    auth: {\n      token,\n      user: {\n        id: userId\n      }\n    }\n  } = state;\n  const {\n    user\n  } = state;\n  let gitHubInfo = {};\n  let imageUrl = BASE_IMAGE_URL;\n\n  try {\n    gitHubInfo = await Axios.get(`https://api.github.com/users/${userData.githubUsername}/repos?per_page=5&sort=created:asc`);\n\n    if (gitHubInfo.data.length > 0) {\n      imageUrl = gitHubInfo.data[0].owner.avatar_url;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n        mutation {\n          updateUser(info: $info) {\n            id\n            username\n            firstName,\n            lastName,\n            email,\n            phone,\n            address,\n            imageUrl,\n            githubUsername,\n            createdAt,\n            updatedAt,\n            quote\n          }\n        }\n      `,\n    variables: {\n      info: {\n        id: user.current_user ? user.current_user.id : userId,\n        ...userData,\n        imageUrl\n      }\n    }\n  });\n\n  if (!errors) {\n    const res = data.updateUser;\n    dispatch({\n      type: EDIT_USER,\n      selectedId: res.id,\n      newUser: res\n    });\n\n    if (res.id === userId) {\n      dispatch({\n        type: EDIT_USER_INFO,\n        newUser: res\n      });\n    }\n\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    const error = errors[0].extensions.payload ? errors[0].extensions.payload : errors[0].message;\n    const formatedError = {};\n    errors[0].extensions.payload && Object.keys(error).map(key => {\n      formatedError[key] = error[key].message;\n    });\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...formatedError\n      }\n    });\n  }\n}; // DELETE GROUP\n\nexport const deleteUser = (setLoading, userId) => async (dispatch, getState) => {\n  const {\n    token\n  } = getState().auth;\n  const {\n    data,\n    errors\n  } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\"\n      }\n    },\n    query: `\n          mutation {\n            deleteUser(id: $id) {\n             status\n             message\n            }\n          }\n        `,\n    variables: {\n      id: userId\n    }\n  });\n\n  if (!errors) {\n    dispatch({\n      type: DELETE_USER,\n      selectedId: userId\n    });\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n    setLoading(false); // using sweetalert2\n\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500\n    });\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message\n    });\n  }\n};\nexport const getGithubProfile = (userId, githubUsername) => async (dispatch, getState) => {\n  try {\n    const state = getState();\n    const gitHubInfo = await Axios.get(`https://api.github.com/users/${githubUsername}/repos?per_page=5&sort=created:asc`);\n\n    if (gitHubInfo.data.length > 0) {\n      if (state.auth.user.id === userId) {\n        dispatch({\n          type: GET_GITHUB_AVATAR,\n          imageUrl: gitHubInfo.data[0].owner.avatar_url\n        });\n      } // UPDATE CURRENT USER DATA\n\n\n      if (state.auth.isAdmin) {\n        dispatch({\n          type: GET_CURRENT_USER_AVATAR,\n          imageUrl: gitHubInfo.data[0].owner.avatar_url\n        });\n      }\n    }\n\n    console.log(gitHubInfo);\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/thanh/booking-sport/sportbook-admin/src/store/actions/user.js"],"names":["GET_ERRORS","CLEAR_ERRORS","GET_USERS","DELETE_USER","EDIT_USER","BASE_URL","GET_USER_PROFILE","GET_FRIEND_PROFILE","EDIT_USER_INFO","GET_GITHUB_AVATAR","GET_CURRENT_USER_AVATAR","BASE_IMAGE_URL","arrayToObject","hera","Swal","logoutDispatch","Axios","getUsers","setLoading","dispatch","getState","token","auth","data","errors","options","url","headers","query","variables","usersListObj","type","users","console","log","message","getUserProfile","userId","user","id","authUserId","user_profile","friend_profile","updatePassword","currentPassword","newPassword","confirmPassword","state","authId","fire","position","title","showConfirmButton","timer","error","includes","editUserInfo","userData","gitHubInfo","imageUrl","get","githubUsername","length","owner","avatar_url","info","current_user","res","updateUser","selectedId","newUser","extensions","payload","formatedError","Object","keys","map","key","deleteUser","getGithubProfile","isAdmin"],"mappings":"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","sourcesContent":["import {\n  GET_ERRORS,\n  CLEAR_ERRORS,\n  GET_USERS,\n  DELETE_USER,\n  EDIT_USER,\n  BASE_URL,\n  GET_USER_PROFILE,\n  GET_FRIEND_PROFILE,\n  EDIT_USER_INFO,\n  GET_GITHUB_AVATAR,\n  GET_CURRENT_USER_AVATAR,\n  BASE_IMAGE_URL,\n} from \"./types\";\nimport { arrayToObject } from \"../../utils/commonFunction\";\nimport { hera } from \"hera-js\";\nimport Swal from \"sweetalert2\";\nimport logoutDispatch from \"../../utils/logoutDispatch\";\nimport Axios from \"axios\";\n\n// GET majors data\nexport const getUsers = (setLoading) => async (dispatch, getState) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n          query {\n            getUsers{\n              id\n              username\n              firstName,\n              lastName,\n              email,\n              quote, \n              phone,\n              address,\n              imageUrl,\n              githubUsername,\n              role,\n              createdAt,\n              updatedAt,\n              posts{\n                id\n                title\n                view\n                reactions {\n                  userId\n                  postId\n                  reactionTypeId\n                }\n              }\n            }\n          }\n        `,\n    variables: {},\n  });\n\n  if (!errors) {\n    const usersListObj = arrayToObject(data.getUsers);\n\n    dispatch({\n      type: GET_USERS,\n      users: usersListObj,\n    });\n\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\n// GET majors data\nexport const getUserProfile = (userId, setLoading) => async (\n  dispatch,\n  getState\n) => {\n  const {\n    token,\n    user: { id: authUserId },\n  } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n          query {\n            getUserProfile(userId: $userId) {\n              id\n              username\n              firstName,\n              lastName,\n              quote\n              email,\n              phone,\n              address,\n              githubUsername,\n              imageUrl\n              totalFollowers\n              posts {\n                id\n                title,\n                description\n                status\n                userId\n                view\n                user {\n                  id\n                  username\n                  imageUrl\n                  firstName\n                  lastName\n                  githubUsername\n                }\n                categoryId\n                createdAt\n                updatedAt\n                comments {\n                  id\n                  comment\n                  userId\n                  parentId\n                  createdAt\n                  updatedAt\n                }\n                reactions {\n                  userId\n                  reactionTypeId\n                  postId\n                }\n              }\n              followed {\n                fromUserId,\n                toUserId\n                createdAt\n              }\n              userFavoritePosts {\n                id\n                userId\n                categoryId\n                title\n                view\n                user {\n                  id\n                  imageUrl\n                  firstName\n                  lastName\n                  githubUsername\n                }\n                description\n                reactions {\n                  userId\n                  reactionTypeId\n                  postId\n                }\n                comments {\n                  id\n                  comment\n                  userId\n                  parentId\n                }\n              }\n            }\n          }\n        `,\n    variables: {\n      userId,\n    },\n  });\n\n  if (!errors) {\n    if (authUserId === userId) {\n      dispatch({\n        type: GET_USER_PROFILE,\n        user_profile: data.getUserProfile,\n      });\n    } else {\n      dispatch({\n        type: GET_FRIEND_PROFILE,\n        friend_profile: data.getUserProfile,\n      });\n    }\n\n    setLoading(false);\n  } else {\n    console.log(errors);\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const updatePassword = (\n  setLoading,\n  currentPassword,\n  newPassword,\n  confirmPassword,\n  userId\n) => async (dispatch, getState) => {\n  const state = getState();\n  const {\n    auth: {\n      token,\n      user: { id: authId },\n    },\n  } = state;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n          changePassword(\n            ${userId ? `userId: ${userId}` : \"\"} \n            currentPassword: $currentPassword, \n            newPassword: $newPassword, \n            confirmPassword: $confirmPassword\n          ) {\n            status\n            message\n          }\n        }\n      `,\n    variables: {\n      currentPassword,\n      newPassword,\n      confirmPassword,\n    },\n  });\n\n  if (!errors) {\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    setLoading(false);\n\n    const { message } = errors[0];\n\n    const error = {};\n    if (message.includes(\"Current password\")) {\n      error.currentPassword = message;\n    } else if (message.includes(\"Password\")) {\n      error.newPassword = message;\n    } else if (message.includes(\"Confirm password\")) {\n      error.confirmPassword = message;\n    } else {\n      Swal.fire({\n        position: \"center\",\n        type: \"Error\",\n        title: message,\n        showConfirmButton: true,\n      });\n    }\n\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...error },\n    });\n  }\n};\n\nexport const editUserInfo = (setLoading, userData) => async (\n  dispatch,\n  getState\n) => {\n  const state = getState();\n  const {\n    auth: {\n      token,\n      user: { id: userId },\n    },\n  } = state;\n  const { user } = state;\n  let gitHubInfo = {};\n  let imageUrl = BASE_IMAGE_URL;\n  try {\n    gitHubInfo = await Axios.get(\n      `https://api.github.com/users/${userData.githubUsername}/repos?per_page=5&sort=created:asc`\n    );\n    if (gitHubInfo.data.length > 0) {\n      imageUrl = gitHubInfo.data[0].owner.avatar_url;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n        mutation {\n          updateUser(info: $info) {\n            id\n            username\n            firstName,\n            lastName,\n            email,\n            phone,\n            address,\n            imageUrl,\n            githubUsername,\n            createdAt,\n            updatedAt,\n            quote\n          }\n        }\n      `,\n    variables: {\n      info: {\n        id: user.current_user ? user.current_user.id : userId,\n        ...userData,\n        imageUrl,\n      },\n    },\n  });\n\n  if (!errors) {\n    const res = data.updateUser;\n    dispatch({\n      type: EDIT_USER,\n      selectedId: res.id,\n      newUser: res,\n    });\n    if (res.id === userId) {\n      dispatch({\n        type: EDIT_USER_INFO,\n        newUser: res,\n      });\n    }\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    setLoading(false);\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    const error = errors[0].extensions.payload\n      ? errors[0].extensions.payload\n      : errors[0].message;\n    const formatedError = {};\n    errors[0].extensions.payload &&\n      Object.keys(error).map((key) => {\n        formatedError[key] = error[key].message;\n      });\n\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: { ...formatedError },\n    });\n  }\n};\n\n// DELETE GROUP\nexport const deleteUser = (setLoading, userId) => async (\n  dispatch,\n  getState\n) => {\n  const { token } = getState().auth;\n\n  const { data, errors } = await hera({\n    options: {\n      url: BASE_URL,\n      headers: {\n        token,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    query: `\n          mutation {\n            deleteUser(id: $id) {\n             status\n             message\n            }\n          }\n        `,\n    variables: {\n      id: userId,\n    },\n  });\n\n  if (!errors) {\n    dispatch({\n      type: DELETE_USER,\n      selectedId: userId,\n    });\n\n    dispatch({\n      type: CLEAR_ERRORS,\n    });\n\n    setLoading(false);\n    // using sweetalert2\n    Swal.fire({\n      position: \"center\",\n      type: \"success\",\n      title: \"Your work has been saved\",\n      showConfirmButton: false,\n      timer: 1500,\n    });\n  } else {\n    logoutDispatch(dispatch, errors);\n    dispatch({\n      type: GET_ERRORS,\n      errors: errors[0].message,\n    });\n  }\n};\n\nexport const getGithubProfile = (userId, githubUsername) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    const state = getState();\n    const gitHubInfo = await Axios.get(\n      `https://api.github.com/users/${githubUsername}/repos?per_page=5&sort=created:asc`\n    );\n\n    if (gitHubInfo.data.length > 0) {\n      if (state.auth.user.id === userId) {\n        dispatch({\n          type: GET_GITHUB_AVATAR,\n          imageUrl: gitHubInfo.data[0].owner.avatar_url,\n        });\n      }\n      // UPDATE CURRENT USER DATA\n      if (state.auth.isAdmin) {\n        dispatch({\n          type: GET_CURRENT_USER_AVATAR,\n          imageUrl: gitHubInfo.data[0].owner.avatar_url,\n        });\n      }\n    }\n    console.log(gitHubInfo);\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}