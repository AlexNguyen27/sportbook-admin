"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalOptions = exports.hera = void 0;
const axios_1 = __importDefault(require("axios"));
function formatVariables(variables) {
    let formattedVariables = JSON.stringify(variables);
    formattedVariables = formattedVariables.replace(/"([^"]+)"\s*:\s*/g, '$1:');
    return formattedVariables;
}
function formatQuery(query, variables) {
    let formattedQuery = query;
    Object.keys(variables).forEach((key) => {
        const regex = new RegExp(`\\$${key}`, 'g');
        formattedQuery = formattedQuery.replace(regex, formatVariables(variables[key]));
    });
    return formattedQuery;
}
const globalOptions = {};
exports.globalOptions = globalOptions;
const hera = ({ query, variables, options = globalOptions, }) => __awaiter(void 0, void 0, void 0, function* () {
    if (!options.url) {
        return {
            data: null,
            errors: [new Error('options.url must be provided')],
        };
    }
    try {
        const res = yield axios_1.default.post(options.url, {
            query: variables ? formatQuery(query, variables) : query,
        }, {
            headers: options.headers,
            timeout: options.timeout || 0,
        });
        return res.data;
    }
    catch (error) {
        return { data: null, errors: [error] };
    }
});
exports.hera = hera;
