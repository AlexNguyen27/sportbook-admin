'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hasDiff = require('./hasDiff');

var _hasDiff2 = _interopRequireDefault(_hasDiff);

var _hasComplex = require('./hasComplex');

var _hasComplex2 = _interopRequireDefault(_hasComplex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThroughProvider = (_temp = _class = function (_React$Component) {
  _inherits(ThroughProvider, _React$Component);

  function ThroughProvider(props) {
    _classCallCheck(this, ThroughProvider);

    var _this = _possibleConstructorReturn(this, (ThroughProvider.__proto__ || Object.getPrototypeOf(ThroughProvider)).call(this, props));

    _initialiseProps.call(_this);

    _this.areas = {};
    return _this;
  }

  _createClass(ThroughProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        through: {
          update: this.update,
          add: this.add,
          remove: this.remove,
          subscribe: this.subscribe
        }
      };
    }
  }, {
    key: 'checkArgs',
    value: function checkArgs(area, key, props) {
      if (process.env.NODE_ENV !== 'production') {
        if (!(typeof area === 'string' || area instanceof String) || !(typeof key === 'string' || key instanceof String) || !(props instanceof Object && !(props instanceof Array) && !(props instanceof Function))) {
          throw new Error("react-through: type error: " + "through.[add|update|remove](area:string, key:string, props:Object)");
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.Children.only(this.props.children);
    }
  }]);

  return ThroughProvider;
}(_react2.default.Component), _class.childContextTypes = {
  through: _propTypes2.default.object.isRequired
}, _class.propTypes = {
  children: _propTypes2.default.element
}, _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.area = function (area) {
    if (!Object.prototype.hasOwnProperty.call(_this2.areas, area)) {
      _this2.areas[area] = {
        name: area,
        listeners: [],
        counters: {},
        data: {}
      };
    }
    return _this2.areas[area];
  };

  this.notify = function (area, syncUpdate) {
    area = _this2.area(area);

    area.listeners.forEach(function (listener) {
      return listener(area.data, syncUpdate);
    });
  };

  this.subscribe = function (area, listener) {
    area = _this2.area(area);

    area.listeners.push(listener);
    listener(area.data);

    return function () {
      area.listeners = area.listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  this.update = function (area, key, props) {
    var syncUpdate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

    _this2.checkArgs(area, key, props);
    area = _this2.area(area);

    if (process.env.NODE_ENV !== 'production') {
      if (!area.counters[key]) {
        throw new Error("react-through: bearing key must be added before update");
      }
    }

    var prevProps = area.data[key] || {};

    if (!(0, _hasDiff2.default)(prevProps, props)) return;

    if (undefined === syncUpdate) {
      syncUpdate = !(0, _hasComplex2.default)(props);
    }

    var data = Object.assign({}, area.data);
    data[key] = _extends({}, props);
    area.data = data;
    _this2.notify(area.name, syncUpdate);
  };

  this.add = function (area, key) {
    _this2.checkArgs(area, key, {});
    area = _this2.area(area);
    area.counters[key] = area.counters[key] ? area.counters[key] + 1 : 1;

    if (process.env.NODE_ENV !== 'production') {
      if (2 < area.counters[key]) {
        throw new Error("react-through: bearing key adding must be not more 2, call remove()");
      }
    }
  };

  this.remove = function (area, key) {
    _this2.checkArgs(area, key, {});
    area = _this2.area(area);
    var count = area.counters[key];
    count = count ? count - 1 : 0;
    area.counters[key] = count;

    if (!count && Object.prototype.hasOwnProperty.call(area.data, key)) {
      var data = Object.assign({}, area.data);
      delete area.counters[key];
      delete data[key];
      area.data = data;
      _this2.notify(area.name, true);
    }
  };
}, _temp);
exports.default = ThroughProvider;